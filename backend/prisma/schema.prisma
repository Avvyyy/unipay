generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id       Int      @id @default(autoincrement())
  username String   @unique
  email    String   @unique
  password String
  created_at DateTime @default(now())

  // Relations
  paymentStreams       paymentStream[] @relation("CreatorStreams")
  userPaymentStreams   userPaymentStreams[]
  dues                 dues[]
  streamMembers        streamMembers[]
  payments             payments[]
  refunds              refunds[]
}

model paymentStream {
  id          Int       @id @default(autoincrement())
  creator_id  Int
  code        String    @unique
  description String?
  amount      Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  creator           users         @relation("CreatorStreams", fields: [creator_id], references: [id])
  userPaymentStreams userPaymentStreams[]
  dues              dues[]
  streamMembers     streamMembers[]
  payments          payments[]
  refunds           refunds[]
}

model userPaymentStreams {
  id               Int       @id @default(autoincrement())
  user_id          Int
  payment_stream_id Int
  joined_at        DateTime  @default(now())

  // Relations
  user           users         @relation(fields: [user_id], references: [id])
  paymentStream  paymentStream @relation(fields: [payment_stream_id], references: [id])
}

model dues {
  id               Int       @id @default(autoincrement())
  user_id          Int
  payment_stream_id Int
  amount           Int
  due_date         DateTime
  paid             Boolean   @default(false)
  status           String
  paid_at          DateTime?
  created_at       DateTime  @default(now())

  // Relations
  user          users         @relation(fields: [user_id], references: [id])
  paymentStream paymentStream @relation(fields: [payment_stream_id], references: [id])
}

model streamMembers {
  id               Int       @id @default(autoincrement())
  user_id          Int
  payment_stream_id Int
  role             String
  unique_id        String
  full_name        String
  joined_at        DateTime  @default(now())

  // Relations
  user          users         @relation(fields: [user_id], references: [id])
  paymentStream paymentStream @relation(fields: [payment_stream_id], references: [id])
}

model payments {
  id               Int       @id @default(autoincrement())
  user_id          Int
  payment_stream_id Int
  amount           Float
  paid_at          DateTime
  reference        String
  method           String
  note             String?
  refunded         Boolean   @default(false)
  refund_amount    Float?
  refund_reason    String?
  refunded_at      DateTime?

  // Relations
  user          users         @relation(fields: [user_id], references: [id])
  paymentStream paymentStream @relation(fields: [payment_stream_id], references: [id])
  refund        refunds?      @relation("RefundToPayment")
}

model refunds {
  id                Int       @id @default(autoincrement())
  payment_id        Int       @unique
  user_id           Int
  payment_stream_id Int
  amount            Float
  refunded_at       DateTime
  reason            String?

  // Relations
  user          users         @relation(fields: [user_id], references: [id])
  paymentStream paymentStream @relation(fields: [payment_stream_id], references: [id])
  payment       payments      @relation("RefundToPayment", fields: [payment_id], references: [id])
}
